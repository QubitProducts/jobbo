syntax = "proto3";

import "google/protobuf/timestamp.proto";

option java_multiple_files = true;
option java_package = "github.com.qubitproducts.jobbo";
option java_outer_classname = "JobboProto";

package jobbo;

// The jobbo service definition.
service Jobbo {
  // Creates a new job, and adds it to the list of pending jobs
  rpc RunJob (RunJobRequest) returns (RunJobReply) {}
  // Lists instances under management
  rpc ListInstances (ListInstancesRequest) returns (ListInstancesReply) {}
  // Removes an instance
  rpc RemoveInstance (RemoveInstanceRequest) returns (RemoveInstanceReply) {}
  rpc GetInstanceLogs (GetInstanceLogsRequest) returns (GetInstanceLogsReply) {}
}

// The request message containing the job to be created.
message RunJobRequest {
  Job job = 1;
}

// The response message containing the job that was created (metadata will be updated)
message RunJobReply {
  Job job = 1;
}

// The jobs returned may be filtered by passing various properties here
message ListInstancesRequest {
  TaskStatus status = 1;
  string name = 2;
  string uid = 3;
}

message ListInstancesReply {
  repeated Instance instances = 1;
}

message RemoveInstanceRequest {
  string uid = 1;
  TaskStatus status = 2;
}

message RemoveInstanceReply {
  Instance instance = 1;
}

message GetInstanceLogsRequest {
  string uid = 1;
}

message GetInstanceLogsReply {
  bytes stderr = 1;
  bytes stdout = 2;
}

// The Jobbo state of a task
enum TaskStatus {
  UNKNOWN = 0;
  PENDING = 1;
  SCHEDULED = 2;
  RUNNING = 3;
  FAILED = 4;
  FINISHED = 5;
}

message Instance {
  Job job = 1;
  InstanceState state = 2;
}

// The mutable state stored alongside the immutable job definition
message InstanceState {
  TaskStatus status = 1;
  string failure_reason = 2;
}

// Defines a job. Immutable once returned from RunJob
message Job {
  Metadata metadata = 1;
  Resources resources = 2;
  Command command = 3;
  Container container = 4;
}

message Metadata {
  string name = 1;
  string uid = 2;
  google.protobuf.Timestamp creation_time = 3;
  map<string, string> labels = 4;
}

message Resources {
  float mem = 1;
  float cpus = 2;
  float disk = 3;
}

message Container {
  string image = 1;

  message PortMapping {
    uint32 host_port = 1;
    uint32 container_port = 2;
    // Protocol to expose as (ie: tcp, udp).
    string protocol = 3;
  }
  repeated PortMapping port_mappings = 2;

  bool force_pull_image = 3;

  message Volume {
    bool read_write = 1;
    
    // Path pointing to a directory or file in the container. If the
    // path is a relative path, it is relative to the container work
    // directory. If the path is an absolute path, that path must
    // already exist.
    string container_path = 2;

    // Absolute path pointing to a directory or file on the host or a
    // path relative to the container work directory.
    string host_path = 3;
  }
  repeated Volume volumes = 4;
}  

message Command {
  message URI {
    string value = 1;
    bool executable = 2;

    // In case the fetched file is recognized as an archive, extract
    // its contents into the sandbox. Note that a cached archive is
    // not copied from the cache to the sandbox in case extraction
    // originates from an archive in the cache.
    bool extract = 3;

    // If this field is "true", the fetcher cache will be used. If not,
    // fetching bypasses the cache and downloads directly into the
    // sandbox directory, no matter whether a suitable cache file is
    // available or not. The former directs the fetcher to download to
    // the file cache, then copy from there to the sandbox. Subsequent
    // fetch attempts with the same URI will omit downloading and copy
    // from the cache as long as the file is resident there. Cache files
    // may get evicted at any time, which then leads to renewed
    // downloading. See also "docs/fetcher.md" and
    // "docs/fetcher-cache-internals.md".
    bool cache = 4;

    // The fetcher's default behavior is to use the URI string's basename to
    // name the local copy. If this field is provided, the local copy will be
    // named with its value instead. If there is a directory component (which
    // must be a relative path), the local copy will be stored in that
    // subdirectory inside the sandbox.
    string output_file = 5;
  }
  repeated URI uris = 1;

  map<string, string> environment = 2;
  bool shell = 3;
  string value = 4;
  repeated string arguments = 5;

  string user = 6;
}
